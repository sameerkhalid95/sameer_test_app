require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/employees" do
  # This should return the minimal set of attributes required to create a valid
  # Employee. As you add validations to Employee, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      full_name: "test",
      identification_number: SecureRandom.uuid
    }
  }

  let(:invalid_attributes) {
    {
      full_name: "test",
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # EmployeesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    let!(:employees) { create_list(:employee, 200) }

    context "Success" do
      it "returns the last 100 employees in descending order" do
        # Employee.create! valid_attributes
        get '/employees', headers: valid_headers, as: :json
        expect(response).to be_successful
        expect(response.content_type).to eq("application/json; charset=utf-8")
        expect(response.parsed_body.pluck("id")).to eq(employees[100...200].map(&:id).reverse)
      end

      it "returns the first 100 employees in descending order on page 2" do
        # Employee.create! valid_attributes
        get '/employees?page=2', headers: valid_headers, as: :json
        expect(response).to be_successful
        expect(response.content_type).to eq("application/json; charset=utf-8")
        expect(response.parsed_body.pluck("id")).to eq(employees[0...100].map(&:id).reverse)
      end
    end
  end

  describe "GET /show" do
    let!(:employee) { create(:employee) }

    it "renders a successful response" do
      get employee_url(employee), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do

    context "with valid parameters" do
      it "creates a new Employee" do
        expect {
          create(:employee)
        }.to change(Employee, :count).by(1)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Employee" do
        expect {
          post employees_url,
               params: { employee: invalid_attributes }, as: :json
        }.not_to change(Employee, :count)
      end

      it "renders a JSON response with errors for the new employee" do
        post employees_url,
             params: { employee: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          full_name: "test1",
          identification_number: SecureRandom.uuid
        }
      }

      it "updates the requested employee" do
        employee = Employee.create! valid_attributes
        patch employee_url(employee),
              params: { employee: new_attributes }, headers: valid_headers, as: :json
        employee.reload
        expect(response).to have_http_status(:ok)
      end

      it "renders a JSON response with the employee" do
        employee = Employee.create! valid_attributes
        patch employee_url(employee),
              params: { employee: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested employee" do
      employee = Employee.create! valid_attributes
      expect {
        delete employee_url(employee), headers: valid_headers, as: :json
      }.to change(Employee, :count).by(-1)
    end
  end
end
